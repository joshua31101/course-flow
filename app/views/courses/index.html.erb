<div class="courses-container">
  <h1 class="title">Course<span class="title2">Flow</span></h1>
  <div class="search_form">
    <form class="form">
      <img src="<%= asset_path('searchicon.png') %>" class="search_icon">
      <input id="course_input" class="form-control" type="text" name="course_name" placeholder="Search course numbers">
    </form>
    <button type="button" class="btn btn-raised btn-success search_button">Search</button>
    <div class="legend text-right">
      <p>* - means course has prerequisites.</p>
    </div>
  </div>
</div>



<script src="//d3js.org/d3.v3.min.js"></script>
<script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>
<script>
  $(document).ready(function() {
    $('#course_input').keypress(function (e) {
     var key = e.which;
     // Check if a user hits enter
     if (key == 13) {
       makeGraph();
       return false;
      }
    });
    $('.search_button').click(function(ev) {
      ev.preventDefault();
      makeGraph();
    });
  });

  // Course and/or relationship
  var relationship = '';
  var margin = {top: 30, right: 120, bottom: 20, left: 120},
      width = 960 - margin.right - margin.left,
      height = 800 - margin.top - margin.bottom;
  var i = 0,
      duration = 750,
      root = {}
  var tree = d3.layout.tree()
      .size([height, width]);
  var diagonal = d3.svg.diagonal();
  var svg = d3.select(".courses-container").append("svg")
      .attr("width", width + margin.right + margin.left)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  // Tooltip
  var tip = d3.tip()
    .attr('class', 'd3-tip')
    .offset([-10, 0])
    .html(function(d) {
      return  "<h3>" + d.course_title + "</h3>" +
              "<p>" + d.course_desc + "</p>" +
              "<p class='text-right'>Credit hours: " + d.course_credit_hour + "</p>";
    });
  svg.call(tip);

  d3.select(self.frameElement).style("height", "800px");

  function update(source) {
    var children = (source.children || source._children).slice();
    for (var i = 0; i < children.length; i++) {
      if (children[i].course_name === undefined) {
        var rel = children[i].relationship
        var _children = children[i]._children;
        if (_children) {
          _children[0]['start_nested'] = true;
          _children[_children.length - 1]['end_nested'] = true;
        }
        for (var j = 0; j < _children.length; j++) {
          _children[j]['nested_rel'] = rel;
          (source.children || source._children).push(_children[j]);
        }
        (source.children || source._children).shift();
      }
    }

    if (source.children && source.children.length >= 12) {
      // svg.style('height', 1000)
      // TODO: dynamically update height of svg
    }
    // Compute the new tree layout.
    var nodes = tree.nodes(root).reverse(),
        links = tree.links(nodes);
    // Update the nodes…
    var node = svg.selectAll("g.node")
        .data(nodes, function(d) { return d.id || (d.id = ++i); });
    // Normalize for fixed-depth.
    nodes.forEach(function(d) {
      d.y = d.depth * 180;
    });

    // Enter any new nodes at the parent's previous position.
    var nodeEnter = node.enter().append("g")
        .attr("class", "node")
        .attr("transform", function(d) { return "translate(" + source.x0 + "," + source.y0 + ")"; })
        .on("click", click)
        .on('mouseover', tip.show)
        .on('mouseout', tip.hide);
    nodeEnter.append('foreignObject')
        .attr("width", function(d) {
          return (d.course_name || d.relationship).length * 12;
        })
        .attr("height", 30)
        .attr("x", function(d) {
          return "-" + (d.course_name || d.relationship).length * 11 / 2 + "px";
        })
        .attr("y", "-15px")
        .style("background", "white");
    // Course number
    nodeEnter.append("text")
        .attr("x", function(d) {
          return d.course_name.length > 8 ? "3.5em" : "1.5em";
        })
        .attr("y", ".35em")
        .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
        .text(function(d) {
          var children = d.children || d._children;
          if (d.course_name) {
            var course_name = children && children.length > 0 ? "*" + d.course_name : d.course_name;
            if (d.end_nested) {
              course_name += ")";
            } else if (d.start_nested) {
              course_name = "(" + course_name;
            }
            return course_name;
          }
        });

    var sibilingCount = (source.children && source.children.length - 1) || 0;
    if (sibilingCount > 0 && source.relationship) {
      var lastChild = source.children[sibilingCount];
      var rightMargin = (lastChild.x - source.children[0].x) / (sibilingCount * 2);
      var childDepth = lastChild.depth;
      // OR text
      nodeEnter.append("text")
        .attr("x", function(d) {
          return d.course_name.length > 8 ? (rightMargin + 20) + "px" : rightMargin + "px";
        })
        .attr("y", ".35em")
        .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
        .text(function(d) {
          if (d === lastChild || d.depth !== childDepth) {
            return '';
          }
          if (d.end_nested) {
            return d.parent.relationship;
          }
          return d.nested_rel ? d.nested_rel : d.parent.relationship;
        });
    }
    // Course title
    // nodeEnter.append("text")
    //     .attr("x", function(d) { return "-" + d.course_title.length * 6.5 / 2 + "px"; })
    //     .attr("y", "1.7em")
    //     .attr("text-anchor", function(d) { return "start"; })
    //     .style("font-size", "14px")
    //     .text(function(d) { return d.course_title });
    // Transition nodes to their new position.

    var nodeUpdate = node.transition()
        .duration(duration)
        .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
    nodeUpdate.select("text")
        .style("fill-opacity", 1);
    // Transition exiting nodes to the parent's new position.
    var nodeExit = node.exit().transition()
        .duration(duration)
        .attr("transform", function(d) { return "translate(" + source.x + "," + source.y + ")"; })
        .remove();
    nodeExit.select("circle")
        .attr("r", 1e-6);
    nodeExit.select("text")
        .style("fill-opacity", 1e-6);
    // Update the links…
    var link = svg.selectAll("path.link")
        .data(links, function(d) { return d.target.id; });
    // Enter any new links at the parent's previous position.
    link.enter().insert("path", "g")
        .attr("class", "link")
        .attr("d", function(d) {
          var o = {x: source.x0, y: source.y0 };
          return diagonal({source: o, target: o});
        });
    // Transition links to their new position.
    link.transition()
        .duration(duration)
        .attr("d", diagonal);
    // Transition exiting nodes to the parent's new position.
    link.exit().transition()
        .duration(duration)
        .attr("d", function(d) {
          var o = {x: source.x, y: source.y};
          return diagonal({source: o, target: o});
        })
        .remove();
    // Stash the old positions for transition.
    nodes.forEach(function(d) {
      d.x0 = d.x;
      d.y0 = d.y;
    });
  }
  // Toggle children on click.
  function click(d) {
    if (d.children) {
      d._children = d.children;
      d.children = null;
    } else {
      d.children = d._children;
      d._children = null;
    }
    update(d);
  }
  function validateInput(input) {
    if (input === '' || input.split.length == 1) {
      return false;
    }
    return true;
  }

  function makeGraph() {
    $('.error').remove();
    // Hide svg when making a graph
    svg.style('visibility', 'hidden');

    if (validateInput($('#course_input').val())) {
      // Add spinner
      $('.courses-container').append('<div class="spinner"></div>');
      d3.json('prereq-courses?' + $('form').serialize(), function(error, flare) {
        if (error || !flare) {
          $('.search_form').append('<p class="error text-center">Opps.. we couldn\'t find a course. Try typing something like CS 3510</p>');
          $('.courses-container .spinner').remove();
          throw error;
        };
        root = flare;
        // Initial position
        root.x0 = width / 2;
        root.y0 = 0;
        function collapse(d) {
          if (d && d.children) {
            d._children = d.children;
            d._children.forEach(collapse);
            d.children = null;
          }
        }
        root.children.forEach(collapse);
        // Remove spinner before displaying trees
        $('.courses-container .spinner').remove();
        // Make svg visible again
        svg.style('visibility', 'visible');
        update(root);
      });
    } else {
      $('.search_form').append('<p class="error text-center">Opps.. we couldn\'t find a course. Try typing something like CS 3510</p>');
    }
  }
</script>
